remotes::install_github("GuangchuangYu/nCov2019")
remotes::install_github("GuangchuangYu/nCov2019")
#====================HW 6 Shulei Yang (sy8uu)=======================
#====================Problem 1
R<-matrix(data = c(1,0.806,0.806,1),nrow = 2,ncol=2)
View(R)
View(R)
P<-matrix(data = c(0.806,0.428), nrow=2)
View(R)
View(P)
inv(R)
solve(R)
solve(solve(R))
phi<-solve(R)%*%P
phi
theta<-1382.2*(1-(t(P)%*%phi))
theta
(1-(0.806*1.316+0.428*(-0.633)))*1382.2
var(phi) = (theta/(100*1382.2))*solve(R)
theta<-1382.2*(1-(t(P)%*%phi))
var(phi) <-(theta/(100*1382.2))*solve(R)
var(phi) <-(290.4828/(100*1382.2))*solve(R)
var<- (290.4828/(100*1382.2))*solve(R)
var
sqrt(0.06)
1.316-(1.96*0.245)
1.316+(1.96*0.245)
-0.633-(1.96*0.245)
-0.633+(1.96*0.245)
2+((7/6)*(38/3))-4
(7/6)*(38/3)
sqrt(1+((7/6)^2)+((37/36)^2))
(7/6)^
2
(37/36)^2
sqrt(2.361111+1.056327)
sqrt(373)*0.0702
0.4^2
29/25
5/4
#arsim
arsim<-function(phis, sigsq, T){
p<-length(phis) #find the number of lags in our AR
noise<-rnorm(T+p, sd=sqrt(sigsq)) #generate the white noise plus a few to get started
x<-c(noise[1:p],rep(0,T)) #put the initial noise terms in and set the rest to zero
for (i in (p+1):(T+p)){ #this loop generates the AR series with the recursive formula
x[i]<-phis %*% x[i-(1:p)] +noise[i]
}
x<-x[(p+1):(T+p)] #throw away those initial starting points
x #return
}
#masim
masim<-function(thetas, sigsq, T){
q<-length(thetas)
noise<-rnorm(T+q, sd=sqrt(sigsq))
x<-c(noise[1:q],rep(0,T))
for (i in (q+1):(T+q)){
x[i]<-thetas %*% noise[i-(1:q)] +noise[i]
}
x<-x[(q+1):(T+q)]
x
}
power.ma1<-function(theta,sigsq,omega)
{
power<-sigsq*(2*theta*cos(2*pi*omega) + 1 + theta^2)
}
# Shulei Yang
# 5170 HW8
# power spectrum for MA(2)
power.ma2<-function(theta1,theta2,omega) {
power<-(1+theta1^2+theta2^2)+2*(theta1+theta1*theta2)*cos(2*pi*omega)+2*theta2*cos(4*pi*omega)
}
#=====(c)
#===(1) theta1=0.5, theta2=-0.9
frequency<-seq(0,0.5,by=0.01)
power.ma2.1<-power.ma2(0.5,-0.9,frequency)
plot(frequency,power.ma2.1, type="l")
# power spectrum for MA(1)
power.ma1<-function(theta,sigsq,omega)
{
power<-sigsq*(2*theta*cos(2*pi*omega) + 1 + theta^2)
}
frequency<-seq(0,0.5,by=0.01)
power1<-power.ma1(0.9,1,frequency)
plot(frequency,power1, type="l", main="Power spectrum of MA(1) with theta=0.9")
power2<-power.ma1(-0.9,1,frequency)
plot(frequency,power2, type="l", main="Power spectrum of MA(1) with theta=-0.9")
#=====(c)
#===(1) theta1=0.5, theta2=-0.9
frequency<-seq(0,0.5,by=0.01)
power.ma2.1<-power.ma2(0.5,-0.9,frequency)
plot(frequency,power.ma2.1, type="l", main = "Spectral density for MA(2) process with theta_1 = 0.5, theta_2=-0.9")
#===(ii) theta1=-0.5, theta2=0.9
frequency<-seq(0,0.5,by=0.01)
power.ma2.2<-power.ma2(-0.5,0.9,frequency)
plot(frequency,power.ma2.2, type="l", main = "Spectral density for MA(2) process with theta_1 = -0.5, theta_2=0.9")
#=====(c)
#===(i) theta1=0.5, theta2=-0.9
frequency<-seq(0,0.5,by=0.01)
power.ma2.1<-power.ma2(0.5,-0.9,frequency)
plot(frequency,power.ma2.1, type="l", main = "Spectral density for MA(2) process with theta_1 = 0.5, theta_2=-0.9")
power2<-power.ma1(-0.9,1,frequency)
plot(frequency,power2, type="l", main="Power spectrum of MA(1) with theta=-0.9")
par(mfrow=c(2,1))
plot(frequency,power1, type="l", main="Power spectrum of MA(1) with theta=0.9")
plot(frequency,power2, type="l", main="Power spectrum of MA(1) with theta=-0.9")
#=====(c)
#===(i) theta1=0.5, theta2=-0.9
frequency<-seq(0,0.5,by=0.01)
power.ma2.1<-power.ma2(0.5,-0.9,frequency)
plot(frequency,power.ma2.1, type="l", main = "Spectral density for MA(2) process with theta_1 = 0.5, theta_2=-0.9")
#===(ii) theta1=-0.5, theta2=0.9
frequency<-seq(0,0.5,by=0.01)
power.ma2.2<-power.ma2(-0.5,0.9,frequency)
plot(frequency,power.ma2.2, type="l", main = "Spectral density for MA(2) process with theta_1 = -0.5, theta_2=0.9")
x1<-masim(c(0.9),1,10000)
x2<-masim(c(-0.9),1,10000)
par(mfrow=c(2,1))
plot.ts(x1[1:100], main="MA(1) with theta=0.9")
plot.ts(x2[1:100], main="MA(1) with theta=-0.9")
#=====(f)
#masim
masim<-function(thetas, sigsq, T){
q<-length(thetas)
noise<-rnorm(T+q, sd=sqrt(sigsq))
x<-c(noise[1:q],rep(0,T))
for (i in (q+1):(T+q)){
x[i]<-thetas %*% noise[i-(1:q)] +noise[i]
}
x<-x[(q+1):(T+q)]
x
}
# simulate
ma2.1<-masim(c(0.5, -0.9),1,10000)
ma2.2<-masim(c(-0.5,0.9),1,10000)
par(mfrow=c(2,1))
plot.ts(ma2.1[1:100], main="MA(1) with theta1=0.5, theta2=-0.9")
plot.ts(ma2.2[1:100], main="MA(1) with theta1=-0.5, theta2 = 0.9")
#=====(c)
#===(i) theta1=0.5, theta2=-0.9
frequency<-seq(0,0.5,by=0.01)
power.ma2.1<-power.ma2(0.5,-0.9,frequency)
plot(frequency,power.ma2.1, type="l", main = "Spectral density for MA(2) process with theta_1 = 0.5, theta_2=-0.9")
#===(ii) theta1=-0.5, theta2=0.9
frequency<-seq(0,0.5,by=0.01)
power.ma2.2<-power.ma2(-0.5,0.9,frequency)
plot(frequency,power.ma2.2, type="l", main = "Spectral density for MA(2) process with theta_1 = -0.5, theta_2=0.9")
# simulate
ma2.1<-masim(c(0.5, -0.9),1,10000)
ma2.2<-masim(c(-0.5,0.9),1,10000)
par(mfrow=c(2,1))
plot.ts(ma2.1[1:100], main="MA(1) with theta1=0.5, theta2=-0.9")
plot.ts(ma2.2[1:100], main="MA(1) with theta1=-0.5, theta2 = 0.9")
frequency<-seq(0,0.5,by=0.01)
power.ma2.1<-power.ma2(0.5,-0.9,frequency)
plot(frequency,power.ma2.1, type="l", main = "Spectral density for MA(2) process with theta_1 = 0.5, theta_2=-0.9")
#===(ii) theta1=-0.5, theta2=0.9
frequency<-seq(0,0.5,by=0.01)
power.ma2.2<-power.ma2(-0.5,0.9,frequency)
plot(frequency,power.ma2.2, type="l", main = "Spectral density for MA(2) process with theta_1 = -0.5, theta_2=0.9")
library(dplyr)
library(tibble)
setwd("~/Desktop/7995-final ")
data <- read.csv("~/Desktop/7995-final /data.csv", header=TRUE)
#====================Data Cleaning ===========
isOver95 <- function(x){
thresh_hold = ceiling(length(x) * 0.95)
c = 0
for(i in x){
if(i == 0) {
c = c + 1
}
if(c == thresh_hold) {
return(TRUE)
}
}
return(FALSE)
}
abondonCols <- apply(data, 2, isOver95)
data <- data[ ,!abondonCols]
View(data)
use <- read.csv("~/Desktop/7995-final /use.csv")
View(use)
View(use)
#=========breeder vs. non-breeder
df_sex<-use[,-c(1,3)]
View(df_sex)
#=========breeder vs. non-breeder
df_breeder<-use[,-c(1,3)]
set.seed(1)
#*********Decision Tree
tree.breeder = tree(as.factor(df_breeder$breeder)~., data = df_breeder)
library(plyr)
library(party)
library(rpart)
library(tree)
library(ipred)
library(rpart)
library(randomForest)
#*********Decision Tree
tree.breeder = tree(as.factor(df_breeder$breeder)~., data = df_breeder)
plot(tree.breeder)
text(tree.breeder)
View(df_breeder)
ldf_breeder<-log(df_breeder[,-1])
View(ldf_breeder)
set.seed(1)
#*********Linear Model
#*********Decision Tree
tree.breeder = tree(as.factor(ldf_breeder$breeder)~., data = ldf_breeder)
breeder_name<-df_breeder$breeder
#=========breeder vs. non-breeder
df_breeder<-use[,-c(1,3)]
ldf_breeder<-log(df_breeder[,-1])
breeder_name<-df_breeder$breeder
ldf_breeder<-cbind(breeder_name,ldf_breeder)
set.seed(1)
#*********Linear Model
#*********Decision Tree
tree.breeder = tree(as.factor(ldf_breeder$breeder_name)~., data = ldf_breeder)
plot(tree.breeder)
text(tree.breeder)
#*********Random Forest****************
# random forests
rf.breeder = randomForest(ldf_breeder[,-1], as.factor(ldf_breeder$breeder_name), ntree = 500, mtry = 3, nodesize = 5, importance = TRUE)
varImpPlot(rf.breeder,type=2)
#*********Random Forest****************
# random forests
rf.breeder = randomForest(ldf_breeder[,-1], as.factor(ldf_breeder$breeder_name), ntree = 500, mtry = 5, nodesize = 5, importance = TRUE)
varImpPlot(rf.breeder,type=2)
#=========female and male
df_sex<-use[,-c(1,2)]
ldf_sex<-log(df_sex[,-1])
sex_name<-df_sex$sex
ldf_sex<-cbind(sex_name,ldf_sex)
#=========female and male
df_sex<-use[,-c(1,2)]
View(df_sex)
sex_name<-df_sex$female
ldf_sex<-cbind(sex_name,ldf_sex)
View(ldf_sex)
set.seed(1)
#*********Linear Model
#*********Decision Tree
tree.sex= tree(as.factor(ldf_sex$sex_name)~., data = ldf_sex)
plot(tree.sex)
text(tree.sex)
#*********Random Forest****************
# random forests
rf.sex = randomForest(ldf_sex[,-1], as.factor(ldf_sex$sex_name), ntree = 500, mtry = 5, nodesize = 5, importance = TRUE)
varImpPlot(rf.sex,type=2)
#=========female and male
df_sex<-use[,-c(1,2)]
ldf_sex<-log(df_sex[,-1])
sex_name<-df_sex$female
ldf_sex<-cbind(sex_name,ldf_sex)
set.seed(1)
#*********Linear Model
#*********Decision Tree
tree.sex= tree(as.factor(ldf_sex$sex_name)~., data = ldf_sex)
plot(tree.sex)
text(tree.sex)
#*********Random Forest****************
# random forests
rf.sex = randomForest(ldf_sex[,-1], as.factor(ldf_sex$sex_name), ntree = 500, mtry = 5, nodesize = 5, importance = TRUE)
varImpPlot(rf.sex,type=2)
